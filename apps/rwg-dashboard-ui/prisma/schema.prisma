generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("SUPABASE_DB_POSTGRES_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("SUPABASE_DB_POSTGRES_URL_NON_POOLING")
}

model DynamicUser {
  id          String                @id
  username    String?
  email       String?
  createdAt   DateTime?             @default(now())
  updatedAt   DateTime?             @updatedAt
  casinoLink  CasinoLink?
  wallets     LinkedWallet[]
  apiCall     CasinoDepositApiCall?
  deleted     Boolean                @default(false)
}

model LinkedWallet {
  address               String                      @id
  chain                 String
  dynamicUser           DynamicUser                 @relation(fields: [dynamicUserId], references: [id])
  dynamicUserId         String
  casinoDepositTotals   CasinoDepositTotal[]
  memberships           WaveMembership[]

  @@unique([address, dynamicUserId, chain])
}

model CasinoLink {
  id              Int                       @id @default(autoincrement())
  dynamicUser     DynamicUser               @relation(fields: [dynamicUserId], references: [id])
  dynamicUserId   String                    @unique
  realbetUserId   Int                       @unique         
  realbetUsername String
  createdAt       DateTime                  @default(now())       
}


enum RewardType {
  TokenBonus
  RealBetCredit
  None
}

model RewardWave {
  id                Int      @id @default(autoincrement())
  label             String
  description       String
  startTime         DateTime
  endTime           DateTime
  availableSeats    Int
  ticketsPerMember  Int
  live              Boolean  @default(true)
  totalRewards      Int
  rewardPresets     RewardPresets[]
  memberships       WaveMembership[]
  whitelist         Whitelist[]
}

model Whitelist {
  address       String      @id
  rewardWaveId  Int
  rewardWave    RewardWave  @relation(fields: [rewardWaveId], references: [id])
}

model WaveMembership {
  id                      Int               @id @default(autoincrement())
  rewards                 Reward[]
  awardedTickets          AwardedTickets[]
  seatNumber              Int
  address                 String
  wallet                  LinkedWallet      @relation(fields: [address], references: [address])
  waveId                  Int
  wave                    RewardWave        @relation(fields: [waveId], references: [id])
  reedeemableTickets      Int               @default(0)
  createdAt               DateTime          @default(now())

  @@unique([address, waveId])
}

enum AwardedTicketsType {
  WaveSignupBonus
  TwitterShare
  AdminCredit
}

model AwardedTickets {
  id              Int                       @id @default(autoincrement())
  type            AwardedTicketsType
  membershipId    Int
  membership      WaveMembership            @relation(fields: [membershipId], references: [id])
  amount          Int
  createdAt       DateTime                  @default(now())
}

model RewardPresets {
  id              Int         @id @default(autoincrement())
  prize           Decimal
  remaining       Int
  type            RewardType
  waveId          Int
  wave            RewardWave  @relation(fields: [waveId], references: [id])
}

model Reward {
  id                    Int                       @id @default(autoincrement())
  userId                String
  type                  RewardType
  amount                Decimal?
  redeemed              Boolean                   @default(false)
  membershipId          Int?
  membership            WaveMembership?           @relation(fields: [membershipId], references: [id])
  createdAt             DateTime                  @default(now())
  CasinoDepositApiCall  CasinoDepositApiCall?
}

model ClaimPeriod {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  end         DateTime
  claims      Claim[]
}

enum ClaimStatus {
  Pending
  Signed
  Claimed
  Error
}

model Claim {
  id          Int           @id @default(autoincrement())
  address     String  
  blockchain  String
  amount      Decimal       @db.Decimal(30, 0)
  bonus       Decimal?      @db.Decimal(30, 0)
  signature   String?
  periodId    Int
  period      ClaimPeriod   @relation(fields: [periodId], references: [id])
  status      ClaimStatus   @default(Pending)
  reason      String?
  txHash      String?
  createdAt   DateTime      @default(now())
  claimedAt   DateTime?

  @@unique([address, blockchain, periodId])
}

enum CallStatus {
  Claimed
  Pending
  Success
  Error
}

model CasinoDepositApiCall {
  id            Int                       @id @default(autoincrement())
  status        CallStatus                @default(Pending)
  totals        CasinoDepositTotal[]
  user          DynamicUser               @relation(fields: [dynamicUserId], references: [id])
  dynamicUserId String                    @unique
  timestamp     DateTime                  @default(now())
  reward        Reward?                   @relation(fields: [rewardId], references: [id])
  rewardId      Int?                      @unique
}

model CasinoDepositTotal {
  id          Int                       @id @default(autoincrement())
  apiCallId   Int
  apiCall     CasinoDepositApiCall      @relation(fields: [apiCallId], references: [id], onDelete: Cascade)
  casino      String
  blockchain  String
  wallet      LinkedWallet              @relation(fields: [address], references: [address])
  address     String
  symbol      String
  amount      Decimal

  @@unique([casino, blockchain, address, symbol])
}

model StakingVoteMerkleTree {
  id              Int      @id @default(autoincrement())
  epoch           Int      @unique
  proposalId      String
  root            String
  proofs          StakingVoteMerkleProof[]
}

model StakingVoteMerkleProof {
  id              Int      @id @default(autoincrement())
  treeId          Int
  tree            StakingVoteMerkleTree @relation(fields: [treeId], references: [id])
  walletAddress   String
  proof           String
}

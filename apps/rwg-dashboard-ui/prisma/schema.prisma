generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("SUPABASE_DB_POSTGRES_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("SUPABASE_DB_POSTGRES_URL_NON_POOLING")
}

model CasinoLink {
  id              Int      @id @default(autoincrement())
  userId          String   @unique 
  realbetUserId   Int      @unique
  realbetUsername String
  createdAt       DateTime @default(now())
}

model RewardsAccount {
  id                  Int      @id @default(autoincrement())
  userId              String   @unique
  waveMemberships     WaveMembership[]
  apiCalls            CasinoDepositApiCall[]
}

enum RewardType {
  TokenBonus
  RealBetCredit
  None
}

model RewardWave {
  id                Int      @id @default(autoincrement())
  label             String
  description       String
  startTime         DateTime
  endTime           DateTime
  availableSeats    Int
  ticketsPerMember  Int
  live              Boolean  @default(true)
  totalRewards      Int
  rewardPresets     RewardPresets[]
  memberships       WaveMembership[]
  whitelist         Whitelist[]
}

model Whitelist {
  address String @id
  rewardWaveId Int
  rewardWave RewardWave @relation(fields: [rewardWaveId], references: [id])
}

model WaveMembership {
  id                      Int               @id @default(autoincrement())
  rewards                 Reward[]
  awardedTickets          AwardedTickets[]
  seatNumber              Int
  accountId               Int
  account                 RewardsAccount    @relation(fields: [accountId], references: [id])
  waveId                  Int
  wave                    RewardWave        @relation(fields: [waveId], references: [id])
  reedeemableTickets      Int               @default(0)
  createdAt               DateTime          @default(now())

  @@unique([accountId, waveId])
}

enum AwardedTicketsType {
  WaveSignupBonus
  TwitterShare
}

model AwardedTickets {
  id              Int      @id @default(autoincrement())
  type            AwardedTicketsType
  membershipId    Int
  membership      WaveMembership @relation(fields: [membershipId], references: [id])
  amount          Int
  createdAt       DateTime @default(now())
}

model RewardPresets {
  id              Int    @id @default(autoincrement())
  prize           Decimal
  remaining       Int
  type            RewardType
  waveId          Int
  wave            RewardWave @relation(fields: [waveId], references: [id])
}

model Reward {
  id                    Int      @id @default(autoincrement())
  userId                String
  type                  RewardType
  amount                Decimal?
  redeemed              Boolean  @default(false)
  membershipId          Int?
  membership            WaveMembership? @relation(fields: [membershipId], references: [id])
  createdAt             DateTime @default(now())
  CasinoDepositApiCall  CasinoDepositApiCall?
}

model ClaimPeriod {
  id          Int      @id @default(autoincrement())
  created     DateTime @default(now())
  end         DateTime
  claims      Claim[]
}

enum ClaimStatus {
  Pending
  Signed
  Claimed
  Error
}

model Claim {
  id          Int           @id @default(autoincrement())
  address     String  
  amount      Decimal       @db.Decimal(30, 0)
  bonus       Decimal?      @db.Decimal(30, 0)
  signature   String?
  periodId    Int
  period      ClaimPeriod   @relation(fields: [periodId], references: [id])
  status      ClaimStatus   @default(Pending)
  reason      String?
  txHash      String?
  createdAt   DateTime      @default(now())
  claimedAt   DateTime?

  @@unique([address, periodId])
}

enum CallStatus {
  Claimed
  Pending
  Success
  Error
}

model CasinoDepositApiCall {
  id          Int           @id @default(autoincrement())
  status      CallStatus    @default(Pending)
  totals      CasinoDepositTotal[]
  account     RewardsAccount @relation(fields: [accountId], references: [id])
  accountId   Int
  timestamp   DateTime      @default(now())
  reward      Reward?       @relation(fields: [rewardId], references: [id])
  rewardId    Int?          @unique

  @@unique([id, accountId])
}

model CasinoDepositTotal {
  id          Int           @id @default(autoincrement())
  apiCallId   Int
  apiCall     CasinoDepositApiCall @relation(fields: [apiCallId], references: [id], onDelete: Cascade)
  casino      String
  blockchain  String
  address     String
  symbol      String
  amount      Decimal

  @@unique([apiCallId, casino, blockchain, address, symbol])
}

model StakingVoteMerkleTree {
  id              Int      @id @default(autoincrement())
  epoch           Int      @unique
  proposalId      String
  root            String
  proofs          StakingVoteMerkleProof[]
}

model StakingVoteMerkleProof {
  id              Int      @id @default(autoincrement())
  treeId          Int
  tree            StakingVoteMerkleTree @relation(fields: [treeId], references: [id])
  walletAddress   String
  proof           String
}
